name: Build and Dockerize Maven Project with Code Coverage

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. Set Up Java Environment (Java 17)
      - name: Set Up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # 3. Cache Maven dependencies for faster builds
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # 4. Build the Maven Project (Runs tests + code coverage)
      - name: Build with Maven
        run: mvn clean verify

      # 5. Check Code Coverage (Ensure minimum 95%)
      - name: Enforce Code Coverage
        run: |
          COVERAGE=$(mvn jacoco:report | grep -oP 'Total\s+\d+\.\d+' | awk '{print $2}')
          echo "Code Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 95" | bc -l) )); then
            echo "Coverage below 95%! Failing build."
            exit 1
          fi

      # 6. Extract Maven Project Version
      - name: Read Maven Version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      # 7. Build Docker Image with Versioned Tag
      - name: Build Docker Image
        run: |
          docker build -t my-app:$VERSION .

      # 8. Log in to Docker Hub (if pushing image)
      - name: Log in to Docker Hub
        if: success()
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      # 9. Push Docker Image to Docker Hub (Optional)
      - name: Push Docker Image
        if: success()
        run: |
          docker tag my-app:$VERSION ${{ secrets.DOCKER_HUB_USERNAME }}/my-app:$VERSION
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/my-app:$VERSION